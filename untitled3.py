# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xvj1ofi8hDEjqUNykbu2Bb85HkI9KytT
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import re
import string

pip install pandas

df_fake =pd.read_csv("Fake.csv")
df_true =pd.read_csv("True.csv")

df_fake.head(10)

df_true.head(10)

df_fake["class"]= 0
df_true["class"]= 1

df_fake.shape,df_true.shape

df_fake_manuel_testing = df_fake.tail(10)
for i in range(23480,21470, -1):
  df_fake.drop([i], axis=0, inplace=True)

df_true_manuel_testing = df_true.tail(10)
for i in range(21416,21406, -1):
    df_true.drop([i], axis=0, inplace=True)

df_manuel_testing= pd.concat([df_fake_manuel_testing, df_true_manuel_testing], axis=0)
df_manuel_testing.to_csv("manuel_testing.csv")

df_merge = pd.concat([df_fake, df_true], axis=0)
df_merge.head(10)

df = df_merge.drop(["title","subject","date"], axis=1)
df.head(10)

df =df.sample(frac=1)

df.head(10)

df.isnull().sum()

def word_drop(text):
  text = text.lower()
  text = re.sub('\[.*?\]','',text)
  text = re.sub("\\W"," ",text)
  text = re.sub('https?://\S+|www\.\S+','',text)
  text = re.sub('<.*?>+','',text)
  text = re.sub('[%s]'% re.escape(string.punctuation), '', text)
  text = re.sub('\n','',text)
  text = re.sub('\w*\d\w*', '', text)
  return text

df["text"] = df["text"].apply(word_drop)

df.head(10)

x=df["text"]
y=df["class"]

x_train, x_test, y_train, y_test= train_test_split(x,y, test_size = .25)

from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.feature_extraction.text import TfidfVectorizer
vectrorization = TfidfVectorizer()
xv_train = vectrorization.fit_transform(x_train)
xv_test = vectrorization.transform(x_test)

"""#############LOGISTIC REGRESSION##################"""

from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train, y_train)

LR.score(xv_test,y_test)

pred_LR =LR.predict(xv_test)

print(classification_report(y_test, pred_LR))

"""############DECISION TREE CLASSIFICATION###############"""

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

DT.score(xv_test,y_test)

pred_DT =DT.predict(xv_test)

print(classification_report(y_test, pred_DT))

"""#########Gradient Boosting Classifier###############"""

from sklearn.ensemble import GradientBoostingClassifier

GBC = GradientBoostingClassifier(random_state=0)
GBC.fit(xv_train, y_train)

GBC.score(xv_test,y_test)

pred_GBC =GBC.predict(xv_test)

print(classification_report(y_test, pred_GBC))

"""**###MANUEL TESTING ##########**"""

def output_label(n):
  if n==0:
    return "Fake News"
  elif n==1:
    return "True News"
def manual_testing(news):
  testing_news = {"text":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["text"]= new_def_test["text"].apply(word_drop)
  new_x_test = new_def_test["text"]
  new_xv_test = vectrorization.transform(new_x_test)
  pred_LR= LR.predict(new_xv_test)
  pred_DT= DT.predict(new_xv_test)
  pred_GBC=GBC.predict(new_xv_test)

  return print("\n\nLR Prediction: {} \nDT Prediction: {}\nGBC Prediction: {}".format(output_label(pred_LR),output_label(pred_DT),output_label(pred_GBC)))
  #return print("\n\nLR Prediction: {}".format(output_label(pred_LR)))
  #return print("\n\nDT Prediction: {}".format(output_label(pred_DT)))
  #return print("\n\nGBC Prediction: {}".format(output_label(pred_GBC)))

news = str(input())
manual_testing(news)

